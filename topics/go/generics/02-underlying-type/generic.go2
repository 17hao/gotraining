package main

import (
	"errors"
	"fmt"
	"log"
)

// =============================================================================

// This code defines two named types based on a concrete type specified
// at the point of declaration. Each type implements a method named last
// that returns the last value in the vector or an error if there are no
// values.

type vectorInt []int

func (v vectorInt) last() (int, error) {
	if len(v) == 0 {
		return 0, errors.New("empty")
	}
	return v[len(v)-1], nil
}

type vectorString []string

func (v vectorString) last() (string, error) {
	if len(v) == 0 {
		return "", errors.New("empty")
	}
	return v[len(v)-1], nil
}

// =============================================================================

// This named type is based on the empty interface so any value can be added
// into the vector. Since the last function is using the empty interface
// for the return, users will need to perform type assertions to get
// back to the concrete value being stored inside the interface.

type vectorInterface []interface{}

func (v vectorInterface) last() (interface{}, error) {
	if len(v) == 0 {
		return nil, errors.New("empty")
	}
	return v[len(v)-1], nil
}

// =============================================================================

// This is a generics version of the named type. It can become a slice of any
// concrete type provided at the point of construction. The last method also
// returns a value of type T determined at compile time. This value needs to
// match the type used in the construction of the generics type.

type vectorGeneric[type T] []T

func (v vectorGeneric[T]) last() (T, error) {
	var zero T
	if len(v) == 0 {
		return zero, errors.New("empty")
	}
	return v[len(v)-1], nil
}

// =============================================================================

func main() {
	vInt := vectorInt{10, 20}
	lastInt, err := vInt.last()
	if err != nil {
		log.Fatal(err)
	}
	fmt.Println("last integer value =", lastInt)

	vStr := vectorString{"A", "B"}
	lastStr, err := vStr.last()
	if err != nil {
		log.Fatal(err)
	}
	fmt.Println("last string value =", lastStr)

	// =========================================================================

	vItf := vectorInterface{10, "A", 20, "B", 3.14}
	lastItf, err := vItf.last()
	if err != nil {
		log.Fatal(err)
	}
	switch v := lastItf.(type) {
	case int:
		fmt.Println("last integer value =", v)
	case string:
		fmt.Println("last string value =", v)
	default:
		fmt.Println("last (unknow type) value =", v)
	}

	// =========================================================================

	vGenInt := vectorGeneric[int]{10, 20}
	lastInt, err = vGenInt.last()
	if err != nil {
		log.Fatal(err)
	}
	fmt.Println("last integer value =", lastInt)

	vGenStr := vectorGeneric[string]{"A", "B"}
	lastStr, err = vGenStr.last()
	if err != nil {
		log.Fatal(err)
	}
	fmt.Println("last string value =", lastInt)
}
