package main

import (
	"fmt"
)

// =============================================================================

// This code defines two named types based on a concrete type specified
// at the point of declaration. Each type implements a method named last
// that returns the last value in the vector or the zero value for the
// vector's type.

type vectorInt []int

func (v vectorInt) last() int {
	if len(v) == 0 {
		return 0
	}
	return v[len(v)-1]
}

type vectorString []string

func (v vectorString) last() string {
	if len(v) == 0 {
		return ""
	}
	return v[len(v)-1]
}

// =============================================================================

// This named type is based on the empty interface so any value can be added
// into the vector. Since the last function is using the empty interface
// for the return, users will need to perform type assertions to get
// back to the concrete value being stored inside the interface.

type vectorInterface []interface{}

func (v vectorInterface) last() interface{} {
	if len(v) == 0 {
		return nil
	}
	return v[len(v)-1]
}

// =============================================================================

// This is a generics version of the named type. It can become a slice of any
// concrete type provided at the point of construction. The last method also
// returns a value of type T determined at compile time. This value needs to
// match the type used in the construction of the generics type.

type vectorGeneric[type T] []T

func (v vectorGeneric[T]) last() T {
	var zero T
	if len(v) == 0 {
		return zero
	}
	return v[len(v)-1]
}

// =============================================================================

func main() {
	vInt := vectorInt{10, 20}
	i := vInt.last()
	if i == 0 {
		fmt.Print("zero value detected: ")
	}
	fmt.Println("last vectorInt value:", i)

	vStr := vectorString{"A", "B"}
	s := vStr.last()
	if s == "" {
		fmt.Print("zero value detected: ")
	}
	fmt.Println("last vectorString value:", s)

	// =========================================================================

	vItf := vectorInterface{10, "A", 20, "B", 3.14}
	itf := vItf.last()
	switch v := itf.(type) {
	case int:
		if v == 0 {
			fmt.Print("zero value detected: ")
		}
	case string:
		if v == "" {
			fmt.Print("zero value detected: ")
		}
	default:
		fmt.Printf("unknow type %T: ", v)
	}
	fmt.Println("last vectorInterface value:", itf)

	// =========================================================================

	vGenInt := vectorGeneric[int]{10, 20}
	i = vGenInt.last()
	if i == 0 {
		fmt.Print("zero value detected: ")
	}
	fmt.Println("last vectorGeneric[int] value:", i)

	vGenStr := vectorGeneric[string]{"A", "B"}
	s = vGenStr.last()
	if s == "" {
		fmt.Print("zero value detected: ")
	}
	fmt.Println("last vectorGeneric[string] value:", s)
}
