package main

import "fmt"

// =============================================================================

// This interface defines a contraint not based on behavior but based on the
// type of data that is acceptable. This type of constrain is important when
// functions (like Add) need to perform operations (like +) that are not 
// supported by all types.

type addOnly interface {
	type string, int, int8, int16, int32, int64, float64
}


func Add(type T addOnly)(v1 T, v2 T) T {
    return v1 + v2
}

// =============================================================================

// This code defines two user defined types, duration based on an int64 and
// fruit based on a string. Each type defines a method named match that accepts
// a value of the specified type to match against the receiver.

type duration int64

func (e duration) match(find duration) bool {
    return e == find
}

type fruit string

func (f fruit) match(find fruit) bool {
    return f == find
}

type bill struct{
    name string
}

func (b bill) match(find bill) bool {
    return b == find
}

// =============================================================================

// The matcher interface defines two constraints. First, it constrains the data
// to what type is acceptable. Second, it constrains the behavior of the data. 
// The match method requires that a value of type T (to be determined at
// compile time) will be the input of the method.
//
// The match function declares that the value of type T must implement the
// matcher interface and is used for the slice and value arguments to the
// function.

type matcher(type T) interface {
    type bill, fruit, int, int8, int16, int32, int64, float32, float64
    match(find T) bool
}

func match(type T matcher)(list []T, find T) int {
	for i, v := range list {
		if find.match(v) {
			return i
		}
	}
	return -1
}

// =============================================================================

func main() {
    fmt.Println(Add(10, 20))
    fmt.Println(Add("A", "B"))
    fmt.Println(Add(3.14159, 2.96))

    d := []duration{5000, 10, 40}
    fmt.Println("Matched at index: ", match(d, 10))

    f := []fruit{"apple", "orange", "banna"}
    fmt.Println("Matched at index: ", match(f, "banna"))

    b := []bill{{name:"bill"}, {name:"jill"}, {name:"joan"}}
    fmt.Println("Matched at index: ", match(b, bill{name:"jill"}))
}
