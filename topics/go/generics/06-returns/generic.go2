package main

import (
	"database/sql"
	"log"
)

// =============================================================================

type User struct {
	ID    int64
	Name  string
	Email string
}

func InsertUser(db *sql.DB, u User) (User, error) {
	const query = "insert into users (name, email) values ($1, $2)"
	result, err := ExecuteQuery(query, u.Name, u.Email)
	if err != nil {
		return User{}, err
	}

	id, err := result.LastInsertId()
	if err != nil {
		return User{}, err
	}

	u.ID = id
	return u, nil
}

type Customer struct {
	ID    int64
	Name  string
	Email string
}

func InsertCustomer(db *sql.DB, c Customer) (Customer, error) {
	const query = "insert into customers (name, email) values ($1, $2)"
	result, err := ExecuteQuery(query, c.Name, c.Email)
	if err != nil {
		return Customer{}, err
	}

	id, err := result.LastInsertId()
	if err != nil {
		return Customer{}, err
	}

	c.ID = id
	return c, nil
}

// =============================================================================

type inserter interface {
	type User, Customer
}

func Insert(type T inserter)(db *sql.DB, entity T, query string, args ...interface{}) (T, error) {
	var zero T

	result, err := ExecuteQuery(query, args...)
	if err != nil {
		return zero, err
	}

	id, err := result.LastInsertId()
	if err != nil {
		return zero, err
	}

	entity.ID = id
	return entity, nil
}

// =============================================================================

type Result struct{}

func (r Result) LastInsertId() (int64, error) { return 1, nil }
func (r Result) RowsAffected() (int64, error) { return 1, nil }

func ExecuteQuery(query string, args ...interface{}) (sql.Result, error) {
	return Result{}, nil
}

// =============================================================================

func main() {
	var db *sql.DB

	var u User
	query := "insert into users (name, email) values ($1, $2)"
	u, err := Insert(db, u, query, u.Name, u.Email)
	if err != nil {
		log.Fatal(err)
	}
	log.Println(u)

	var c Customer
	query := "insert into customers (name, email) values ($1, $2)"
	c, err := Insert(db, c, query, u.Name, u.Email)
	if err != nil {
		log.Fatal(err)
	}
	log.Println(c)
}
