package main

import (
	"context"
	"errors"
	"fmt"
	"time"
)

// =============================================================================

// This code defined a concrete type named user with a name and email field.

type user struct {
	name  string
	email string
}

// =============================================================================

// WorkerInterface defines a function signature that takes a context value as 
// input and returns any value (via the empty interface) and an error.
//
// The retryInterface function provides functionality to execute a worker
// function and if it fails, calls it again until the context times out. The
// function returns back to the caller the values returned from the worker
// function.

type WorkerInterface func(ctx context.Context) (interface{}, error)

func retryInterface(ctx context.Context, interval time.Duration, worker WorkerInterface) (interface{}, error) {
	if ctx.Err() != nil {
		return nil, errors.New("error")
	}

	var retry *time.Timer

	for {
		if value, err := worker(ctx); err == nil {
			return value, nil
		}

		if retry == nil {
			retry = time.NewTimer(interval)
		}

		select {
		case <-ctx.Done():
			retry.Stop()
			return nil, errors.New("error")
		case <-retry.C:
			retry.Reset(interval)
		}
	}
}

// =============================================================================

// This is a generics version of the last example.
//
// WorkerGeneric defines a function signature that takes a context value as 
// input and returns any value of type Result (to be determined at compile time)
// and an error.
//
// The retryGeneric function provides functionality to execute a worker
// function and if it fails, calls it again until the context times out. The
// function returns back to the caller the values returned from the worker
// function. In this case, the returned values are based on type Result and not
// the empty interface.
//
// Returning zero value is an interesting aspect of this code. A variable
// named zero of type Result is constructed at the return site and used for the
// return statement.

type WorkerGeneric(type Result) func(ctx context.Context) (Result, error)

func retryGeneric(type Result)(ctx context.Context, interval time.Duration, worker WorkerGeneric(Result)) (Result, error) {
	if ctx.Err() != nil {
		var zero Result 
		return zero, errors.New("error")
	}

	var retry *time.Timer

	for {
		if value, err := worker(ctx); err == nil {
			return value, nil
		}

		if retry == nil {
			retry = time.NewTimer(interval)
		}

		select {
		case <-ctx.Done():
			retry.Stop()
			var zero Result 
			return zero, errors.New("error")
		case <-retry.C:
			retry.Reset(interval)
		}
	}
}

// =============================================================================

func main() {
	ctx := context.Background()

	workerInt := func(ctx context.Context) (interface{}, error) {
		time.Sleep(time.Millisecond)
		return &user{"bill", "b@email.com"}, nil
	}
	intf, err := retryInterface(ctx, time.Second, workerInt)
	fmt.Println(intf.(*user), err)

	workerGen := func(ctx context.Context) (*user, error) {
		time.Sleep(time.Millisecond)
		return &user{"bill", "b@email.com"}, nil
	}
	user, err := retryGeneric(*user)(ctx, time.Second, workerGen)
	fmt.Println(user, err)
}
