package main

import (
	"context"
	"errors"
	"fmt"
	"time"
)

// =============================================================================

type user struct {
	name  string
	email string
}

// =============================================================================

type WorkerInterface func(ctx context.Context) (interface{}, error)

func retryInterface(ctx context.Context, interval time.Duration, worker WorkerInterface) (interface{}, error) {
	if ctx.Err() != nil {
		return nil, errors.New("error")
	}

	var retry *time.Timer

	for {
		if value, err := worker(ctx); err == nil {
			return value, nil
		}

		if retry == nil {
			retry = time.NewTimer(interval)
		}

		select {
		case <-ctx.Done():
			retry.Stop()
			return nil, errors.New("error")
		case <-retry.C:
			retry.Reset(interval)
		}
	}
}

// =============================================================================

type WorkerGeneric(type T) func(ctx context.Context) (T, error)

func retryGeneric(type T)(ctx context.Context, interval time.Duration, worker WorkerGeneric(T)) (T, error) {
	if ctx.Err() != nil {
		var zero T 
		return zero, errors.New("error")
	}

	var retry *time.Timer

	for {
		if value, err := worker(ctx); err == nil {
			return value, nil
		}

		if retry == nil {
			retry = time.NewTimer(interval)
		}

		select {
		case <-ctx.Done():
			retry.Stop()
			var zero T 
			return zero, errors.New("error")
		case <-retry.C:
			retry.Reset(interval)
		}
	}
}

// =============================================================================

func main() {
	ctx := context.Background()

	workerInt := func(ctx context.Context) (interface{}, error) {
		time.Sleep(time.Millisecond)
		return &user{"bill", "b@email.com"}, nil
	}
	intf, err := retryInterface(ctx, time.Second, workerInt)
	fmt.Println(intf.(*user), err)

	workerGen := func(ctx context.Context) (*user, error) {
		time.Sleep(time.Millisecond)
		return &user{"bill", "b@email.com"}, nil
	}
	user, err := retryGeneric(*user)(ctx, time.Second, workerGen)
	fmt.Println(user, err)
}
