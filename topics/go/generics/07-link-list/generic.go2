package main

import "fmt"

// scalarOnly defines a set of scalar types (a constraint) that concrete
// data must represent to satisfy the interface.
type scalarOnly interface {
	type int, int8, int16, int32, int64, string
}

// type node is defined to work internally with values of type T
// (to be determined at compile time).
type node(type T scalarOnly) struct {
	Data T
	next *node(T)
	prev *node(T)
}

// type list is defined to work internally with values of type T
// (to be determined at compile time).
type list(type T scalarOnly) struct {
	Count int
	first *node(T)
	last  *node(T)
}

// add is a method that is bound to pointers of type list defined to
// work with values of type T (to be determined at compile time) and returns
// a pointer of type list defined to work with values of type T.
func (l *list(T)) add(data T) *node(T) {
	n := node(T) {
		Data: data,
		prev: l.last,
	}
	l.Count++
	if l.first == nil && l.last == nil {
		l.first = &n
		l.last = &n
		return &n
	}
	l.last.next = &n
	l.last = &n
	return &n
}

// type op is a function that accepts a pointer of type node defined to
// work with values of type T (to be determined at compile time).
type op(type T scalarOnly) func(n *node(T)) error

// operate is a method that is bound to pointers of type list defined to
// work with values of type T (to be determined at compile time) and accepts
// a function of type op that works with values of type T
// (to be determined at compile time).
func (l *list(T)) operate(f op(T)) error {
	n := l.first
	for n != nil {
		if err := f(n); err != nil {
			return err
		}
		n = n.next
	}
	return nil
}

func main() {

	// At compile time, construct a version of type list that works with
	// values of type string.
	var l list(string)

	l.add("bill")
	l.add("ale")

	f := func(n *node(string)) error {
		fmt.Println(n.Data)
		return nil
	}
	l.operate(f)
}