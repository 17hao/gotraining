package main

import (
	"fmt"
)

// =============================================================================

type operateFunc(type T) func(t T) T

type SliceConstraint(type T) interface {
	type []T
}

// The interesting code here is how T is used to satisfy the type
// of slice S will represent for the SliceConstraint interface.
func operate(type S SliceConstraint(T), T interface{})(slice S, fn operateFunc(T)) S {
	ret := make(S, len(slice))
	for i, v := range slice {
		ret[i] = fn(v)
	}
	return ret
}

// =============================================================================

// This also provides a slice constraint and is more readable.
func operate2(type T)(slice []T, fn operateFunc(T)) []T {
	ret := make([]T, len(slice))
	for i, v := range slice {
		ret[i] = fn(v)
	}
	return ret
}

// =============================================================================

type Numbers []int

func Double(n Numbers) Numbers {
	fn := func(n int) int {
		return 2 * n
	}

	// numbers := operate([]int, int)(n, fn)
	numbers := operate(n, fn)
	return numbers
}

// =============================================================================

func main() {
	n := Numbers{10, 20, 30, 40, 50}
	fmt.Println(n)

	n = Double(n)
	fmt.Println(n)
}