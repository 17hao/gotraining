package main

import (
	"context"
	"fmt"
	"math/rand"
	"sync"
	"time"
)

// =============================================================================

// doWorker defines a function that takes a context and returns some value of
// type R to be determined at compile time.

type doWorker(type R) func(ctx context.Context) R

// doWork will execute any function of type doWorker defined above. The
// function executes the work function in a goroutine and returns a channel
// of type R back to the caller.

func doWork(type R)(ctx context.Context, work doWorker(R)) chan R {
	ch := make(chan R, 1)

	go func() {
		ch <- work(ctx)
		fmt.Println("doWork : work complete")
	}()

	return ch
}

// =============================================================================

// poolWorker defines a function that takes an input of type I and returns some
// value of type R both to be determined at compile time.

type poolWorker(type I, R) func(input I) R

// poolWork will execute any function of type poolWorker defined above. The
// function creates a pool of goroutines waiting to receive input for the work
// function. Once received, the work function is executed with the received
// input and the result is displayed.

func poolWork(type I, R)(wg *sync.WaitGroup, size int, work poolWorker(I, R)) chan I {
	ch := make(chan I)

	wg.Add(size)
	for i := 0; i < size; i++ {
		go func() {
			defer wg.Done()
			for input := range ch {
				r := work(input)
				fmt.Println("pollWork :", r)
			}
		}()
	}

	return ch
}

// =============================================================================

func main() {
	ctx, cancel := context.WithTimeout(context.Background(), 100 * time.Millisecond)
	defer cancel()

	dwf := func(ctx context.Context) string {
		time.Sleep(time.Duration(rand.Intn(200)) * time.Millisecond)
		return "work complete"
	}

	select {
	case v := <-doWork(ctx, dwf):
		fmt.Println("main:", v)
	case <-ctx.Done():
		fmt.Println("main: timeout")
	}

	fmt.Println("-------------------------------------------------------------")
	
	pwf := func(input int) string {
		time.Sleep(time.Duration(rand.Intn(200)) * time.Millisecond)
		return fmt.Sprintf("%d : received", input)
	}

	t := time.NewTimer(50 * time.Millisecond)
	const size = 2
	var wg sync.WaitGroup

	ch := poolWork(&wg, size, pwf)
	{
		for i := 0; i < 10; i++ {
			select {
			case ch <- i:
				t.Stop()
				fmt.Printf("pollWork : %d : sent\n", i)
			case <-t.C:
				fmt.Printf("pollWork : %d : <timeout>\n", i)
			}
			t.Reset(20 * time.Millisecond)
		}
	}
	close(ch)

	wg.Wait()
	t.Stop()
}